{"version":3,"sources":["components/layout/main-app/header/Header.js","components/layout/main-app/dashboard/join-requests/JoinRequestsPending.js","components/layout/main-app/dashboard/join-requests/JoinRequestsApproved.js","components/layout/main-app/dashboard/Dashboard.js","components/layout/main-app/notifications/NotificationsList.js","components/layout/main-app/notifications/Notifications.js","components/layout/main-app/active-rooms/room-list/RoomList.js","components/layout/main-app/active-rooms/current-room/message-input/MessageInput.js","components/layout/main-app/active-rooms/current-room/message-list/MessageList.js","components/layout/main-app/active-rooms/current-room/create-room/NewRoomForm.js","components/layout/main-app/active-rooms/current-room/create-room/CreateRoom.js","components/layout/main-app/active-rooms/current-room/rooms-search/RoomsSearch.js","components/layout/main-app/active-rooms/current-room/CurrentRoom.js","components/layout/main-app/active-rooms/ActiveRooms.js","components/layout/main-app/private-chats/user-list/UserList.js","components/layout/main-app/private-chats/users-search/UsersSearch.js","components/layout/main-app/private-chats/users-search/FindUser.js","components/layout/main-app/private-chats/current-chat/message-input/MessageInput.js","components/layout/main-app/private-chats/current-chat/message-list/MessageList.js","components/layout/main-app/private-chats/current-chat/CurrentChat.js","components/layout/main-app/private-chats/PrivateChats.js","components/layout/main-app/MainApp.js","components/layout/login/WarningMessage.js","components/layout/login/Login.js","components/_useSocket.js","components/layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Header","activeTab","setActiveTab","handleItemClick","e","name","Menu","inverted","Item","active","onClick","JoinRequestsPending","joinRequestsPending","className","List","divided","verticalAlign","map","req","key","id","Content","floated","JoinRequestsApproved","joinRequestsApproved","Dashboard","NotificationsList","joinRequests","confirmJoinRequest","Button","Image","avatar","src","requested_room","Notifications","joinRequestsReceived","console","log","RoomList","roomNames","currentRoom","setCurrentRoom","fluid","vertical","tabular","room","MessageInput","onSendMessage","useState","messageText","setMessage","onSend","Input","action","content","value","placeholder","onChange","inputValue","onKeyUp","keyCode","MessageList","activeRoom","messages","messagesRef","useRef","useEffect","current","scrollIntoView","behavior","relaxed","length","sort","a","b","date","i","messageid","messagetext","username","roomname","Description","ref","NewRoomForm","sendCreatedNewRoom","roomInput","setRoomInput","setDescription","checked","setChecked","Segment","Form","Group","widths","label","target","TextArea","Checkbox","prevstate","type","roomName","authorise","CreateRoom","RoomsSearch","availableRooms","onJoinRoomsRequest","joinRequestSent","setJoinRequestSent","getOptions","text","_","snakeCase","setValue","options","setOptions","open","setOpenModal","onButtonClick","Modal","size","onClose","requestedRooms","Actions","positive","Dropdown","selection","multiple","search","disabled","loading","CurrentRoom","getMessages","onSendCreatedNewRoom","renderSection","ActiveRooms","rooms","onMessageReceived","Grid","Column","width","stretched","UserList","PMuserNames","PMsetActiveChat","UsersSearch","filteredUsers","onSendPrivateMessage","activeIndex","setActiveIndex","privateMessage","setPrivateMessage","onSelectUser","titleProps","index","receipient","Accordion","Title","Icon","FindUser","availableUsers","setFilteredUsers","query","filtered","filter","user","includes","senderName","receipientName","message","CurrentChat","PrivateChats","PMessages","onPrivateMessageReceived","PMactiveChat","MainApp","onLogout","dir","DashboardProps","JoinNewRoomProps","ActiveRoomsProps","PrivateChatsProps","NotificationsProps","WarningMessage","otherProps","Message","title","Login","authenticateUser","signupNewUser","userUnauthorised","setUsername","password","setPassword","passwordConfirm","setPasswordConfirm","isSignupMode","setIsSignupMode","signupSuccess","setSignupSuccess","nameError","setNameError","passwordError","setPasswordError","passwordConfirmError","setPasswordConfirmError","signupError","setSignupError","signinError","setSigninError","handleNameChange","currentName","handlePasswordChange","currentPassword","handlePasswordConfirmChange","currentPasswordConfirm","clearInputs","centered","attributes","negative","renderErrorMessage","color","renderSuccessMessage","Field","style","error","pointing","classes","then","response","status","data","catch","useSocket","socketRef","userAuthenticated","setUserAuthenticated","setUserUnauthorised","roomEventsWereSet","setEventsWereSet","setRooms","setRoomNames","setAvailableRooms","setAvailableUsers","setJoinRequestsPending","setJoinRequestsApproved","PMUserNames","setPMUserNames","setPMessages","setPMEventsWereSet","joinRequestsToApprove","setjoinRequestsToApprove","io","on","socket","emit","setPMEventsListeners","pastMessages","privateMessages","join_requests","reqs_pending","reqs_approved","newRoom","updateRoomState","disconnect","setRoomEventsListeners","PMnames","Object","keys","forEach","addMessageToChat","chatName","updateChatState","chatMessages","oldMessages","updateMessages","push","updatedRoom","updatedRooms","pass","newName","newPassword","payload","axios","method","url","headers","logoutUser","request","updated","sendJoinRequest","res","updatedAvailableRooms","getMessagesForRoom","sendMessage","longDate","Date","parse","getPrivateMessagesFromUser","userName","sendCreateNewRoom","creatorName","sendPM","Layout","props","joinRoomsSuccess","socketMethodsToProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dac9e7cd.chunk.js","sourcesContent":["import React from 'react'\nimport { Menu } from 'semantic-ui-react'\nimport * as classes from './Header.css';\n\nconst Header = ({activeTab, setActiveTab}) => {\n\n  const handleItemClick = (e, { name }) => {\n    setActiveTab(name);\n  };\n\n  return (\n    <Menu inverted>\n      <Menu.Item\n        name='logout'\n        active={activeTab === 'logout'}\n        onClick={handleItemClick}\n      />\n      <Menu.Item\n        name='your-rooms'\n        active={activeTab === 'your rooms'}\n        onClick={handleItemClick}\n      />\n      <Menu.Item\n        name='private-chats'\n        active={activeTab === 'private chats'}\n        onClick={handleItemClick}\n      />\n      <Menu.Item\n        name='notifications'\n        active={activeTab === 'notifications'}\n        onClick={handleItemClick}\n      />\n      <Menu.Item\n        name='dashboard'\n        active={activeTab === 'dashboard'}\n        onClick={handleItemClick}\n      />\n    </Menu>\n  )\n}\n\nexport default Header;\n\n","import React from 'react';\nimport { List } from 'semantic-ui-react';\n\nconst JoinRequestsPending = ({joinRequestsPending}) => {\n\n  return (\n    <>\n      <div className='req-list_wrapper'>\n        {joinRequestsPending && <h3>Join Requests Pending:</h3>}\n        <List divided verticalAlign='middle' >\n          {joinRequestsPending && joinRequestsPending.map(req => \n          <>\n            <List.Item key={req.id}>\n              <List.Content floated='left' >{req} </List.Content>\n            </List.Item>\n            {/* <List.Item key={req}>\n              <List.Content floated='left' >{req} </List.Content>\n            </List.Item>\n            <List.Item key={req}>\n            <List.Content floated='left' >{req} </List.Content>\n            </List.Item> */}\n            </>\n          )}\n        </List>\n      </div>\n    </>\n  )\n}\n\nexport default JoinRequestsPending;","import React from 'react';\nimport { List } from 'semantic-ui-react';\nimport * as classes from './JoinRequests.css'\n\nconst JoinRequestsApproved = ({joinRequestsApproved}) => {\n\n  return (\n    <>\n      <div className='req-list_wrapper'>\n        {joinRequestsApproved && <h3>Approved requests:</h3>}\n        <List divided verticalAlign='middle'>\n          {joinRequestsApproved && joinRequestsApproved.map(req => \n            <>\n              <List.Item key={req.id}>\n                <List.Content floated='left' >{req} </List.Content>\n              </List.Item>\n              {/* <List.Item key={req.id}>\n                <List.Content floated='left' >{req} </List.Content>\n              </List.Item>\n              <List.Item key={req.id}>\n                <List.Content floated='left' >{req} </List.Content>\n              </List.Item> */}\n            </>\n          )}\n        </List>\n      </div>\n    </>\n  )\n}\n\nexport default JoinRequestsApproved;","import React, { useState } from 'react';\nimport * as classes from './Dashboard.css';\nimport JoinRequestsPending from './join-requests/JoinRequestsPending';\nimport JoinRequestsApproved from './join-requests/JoinRequestsApproved';\n\nconst Dashboard = ({\n  joinRequestsPending,\n  joinRequestsApproved,\n}) => {\n\n\n  return (\n    <div className='searchContainer'>\n      <JoinRequestsPending joinRequestsPending={joinRequestsPending} />\n      <JoinRequestsApproved joinRequestsApproved={joinRequestsApproved} />\n    </div>\n  )\n}\n\nexport default Dashboard;","import React from 'react'\nimport { Button, Image, List } from 'semantic-ui-react';\nimport * as classes from './Notifications.css';\n\nconst NotificationsList = ({joinRequests, confirmJoinRequest}) => (\n  <>\n    <List divided verticalAlign='middle' className='notificationsList'>\n    {joinRequests && joinRequests.map(req => \n      <List.Item key={req.id}>\n        <List.Content floated='right' className='confirm'>\n          <Button className='acceptButton' onClick={() => confirmJoinRequest(req)}>Confirm Request</Button>\n        </List.Content>\n        <Image floated='left' avatar src='https://react.semantic-ui.com/images/avatar/small/lindsay.png' />\n        <List.Content floated='left' >{req.name} send a join request for room: {req.requested_room}</List.Content>\n     </List.Item>\n    )}\n  </List>\n  </>\n)\n\nexport default NotificationsList;\n","import React from 'react';\nimport NotificationsList from './NotificationsList';\n\nconst Notifications = ({joinRequestsReceived, confirmJoinRequest}) => {\n  console.log('[Notifications], joinRequestReceived: ', joinRequestsReceived);\n  return (\n      <NotificationsList joinRequests={joinRequestsReceived} confirmJoinRequest={confirmJoinRequest} />\n  )\n}\n\nexport default Notifications;","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nconst RoomList = ({ roomNames, currentRoom, setCurrentRoom }) => {\n\n  const handleItemClick = (e, { name }) => setCurrentRoom(name);\n\n  console.log('active item: ', currentRoom);\n\n  return (\n    <Menu fluid vertical tabular>\n        {\n          roomNames.map(room => {\n            return (\n              <Menu.Item\n                name={room}\n                key={room}\n                active={currentRoom === room}\n                onClick={handleItemClick}\n              />\n            )\n          })\n        }\n        <Menu.Item\n          name='create room'\n          active={currentRoom === 'create room'}\n          onClick={handleItemClick}\n        />\n        <Menu.Item\n          name='join new room'\n          active={currentRoom === 'join new room'}\n          onClick={handleItemClick}\n        />\n    </Menu>\n  )\n}\n\nexport default RoomList;","import React, { useState } from 'react';\nimport { Input } from 'semantic-ui-react';\nimport * as classes from './MessageInput.css';\n\nconst MessageInput = ({onSendMessage}) => {\n\n  const [ messageText, setMessage ] = useState('');\n  \n  const onSend = () => {\n    setMessage('');\n    console.log('sending message from MessageInput: ', messageText);\n    onSendMessage(messageText);\n  } \n\n  const updateCurrentMessage = (inputValue) => {\n    setMessage(() => inputValue);\n  }\n\n  return (\n    <Input \n      className='messageInput' \n      action={{content: 'Send', onClick: onSend}} \n      value={messageText}\n      placeholder='Type message...' \n      onChange={(e, {value}) => updateCurrentMessage(value)}\n      onKeyUp={(e) => {\n        if (e.keyCode === 13) {\n          onSend()\n        }\n      }}\n    />\n  )\n}\n\nexport default MessageInput;","import React, { useRef, useEffect } from 'react';\nimport { List } from 'semantic-ui-react';\nimport * as classes from './MessageList.css';\n\nconst MessageList = ({activeRoom, messages}) => {\n\n  // console.log(messages);\n\n  const messagesRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesRef.current.scrollIntoView({behavior: 'smooth'});\n  }\n\n  const renderMessages = () => {\n    const sortedMessages = messages.sort((a,b) => a.date - b.date);\n    return sortedMessages.map(({date, messageid, messagetext, roomname, username }, i) => { \n      return (\n       <List.Item>\n         {/* <List.Icon name='user_icon' size='large' verticalAlign='middle' /> */}\n         <List.Content key={i}>\n           <List.Header>Room {activeRoom}, User name: {username}</List.Header>\n           <List.Description>{messagetext}</List.Description>\n         </List.Content>\n       </List.Item>\n     )\n   })\n  }\n\n  useEffect(scrollToBottom, [messages]);\n\n  return (\n    <div>\n      <List divided relaxed>\n        { messages && messages.length ? renderMessages() : <div>No messages in {activeRoom} yet!</div>}\n        <div ref={messagesRef} />\n      </List>\n    </div>\n  )\n}\n\nexport default MessageList;","import React, { useState } from 'react'\nimport { Button, Form, Segment } from 'semantic-ui-react'\nimport * as classes from './NewRoomForm.css'\n\n\nconst NewRoomForm = ({sendCreatedNewRoom}) => {\n  \n  const [ roomInput, setRoomInput ] = useState('');\n  const [ description, setDescription ] = useState('');\n  const [ checked, setChecked ] = useState(false);\n\n  const onCreatedNewRoom = (e) => {\n      sendCreatedNewRoom({\n        roomName: roomInput,\n        authorise: checked\n      })\n  }\n\n  const handleRoomChange = (e) => {\n    setRoomInput(e.target.value)\n  }\n\n  const handleDescriptionChange = (e) => {\n    setDescription(e.target.value)\n  }\n\n  const toggleCheckbox = (e) => {\n    setChecked(prevstate => {\n      return !prevstate\n    })\n  }\n  return (\n    <Segment inverted>\n      <Form inverted className='new-room_form'>\n        <Form.Group widths='equal'>\n          <Form.Input fluid label='room name' placeholder='room name' onChange={handleRoomChange} value={roomInput} />\n          {/* <Form.Input fluid label='your name' placeholder='your name' onChange={handleNameChange} value={nameInput} /> */}\n          <Form.TextArea fluid label='description' placeholder='description' onChange={handleDescriptionChange} />\n        </Form.Group>\n        <Form.Checkbox label='Allow users to join without approval' onClick={toggleCheckbox} />\n        <Button type='submit' onClick={onCreatedNewRoom} >Submit</Button>\n      </Form>\n    </Segment>\n  )\n}\n\nexport default NewRoomForm;\n","import React from 'react';\nimport NewRoomForm from './NewRoomForm';\n\nconst CreateRoom = ({sendCreatedNewRoom}) => {\n\n  return (\n    <div>\n      <NewRoomForm sendCreatedNewRoom={sendCreatedNewRoom} />\n    </div>\n  )\n}\n\nexport default CreateRoom;","import _ from 'lodash'\nimport React, { useState } from 'react';\nimport { Button, Dropdown, Modal } from 'semantic-ui-react' \nimport * as classes from './RoomsSearch.css'\n\nconst RoomsSearch = ({\n  availableRooms, \n  onJoinRoomsRequest, \n  joinRequestSent,\n  setJoinRequestSent\n}) =>  {\n\n  const getOptions = () => {\n      return availableRooms.map(room => {\n        return { key: room, text: room, value: _.snakeCase(room) }\n      })\n  }\n\n  const [ value, setValue ] = useState([]);\n  const [ options, setOptions ] = useState(getOptions()); \n  const [ open, setOpenModal] = useState(true);\n\n  // console.log('availableRooms', availableRooms);\n  \n  // console.log('search value: ', value);\n\n  const handleChange = (e, { value }) => setValue( value )\n  // const handleSearchChange = (e, { searchQuery }) => setSearchQuery( searchQuery )\n\n  const onSubmitJoinRequest = () => {\n    onJoinRoomsRequest(value);\n    setValue([]);\n  }\n\n  const onButtonClick = () => {\n    setJoinRequestSent(false);\n    setOpenModal(false);\n    setOptions(getOptions);\n  }\n\n  const renderModal = () => (\n    \n    <Modal\n      size='mini'\n      open={open}\n      onClose={onButtonClick} >\n      <Modal.Header>Join Request Successful!</Modal.Header>\n      <Modal.Content>\n        <p>You have requested to join the following rooms: </p>\n        {joinRequestSent && joinRequestSent.requestedRooms.map(room => (<p>{room}</p>))}\n        <p>You'll be notified once the room admin accepts your request.</p>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button positive onClick={onButtonClick}>\n          Ok\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n\n  const modalOpen = joinRequestSent ? true : false;\n  // console.log('joinRequestSent: ', joinRequestSent, 'modalOpen: ', modalOpen);\n  return (\n    <>\n    {renderModal(modalOpen)}\n    {/* <RequestModal openModal={modalOpen} setJoinRequestSent={setJoinRequestSent} /> */}\n    <div className='roomSearch'>\n      <div>\n        <Dropdown\n          fluid\n          selection\n          multiple={true}\n          search={true}\n          options={options}\n          value={value}\n          placeholder='Select rooms'\n          onChange={handleChange}\n          disabled={false}\n          loading={false}\n        />\n      </div>\n      <div className='buttonWrapper'>\n        <Button fluid \n                className='joinButton'\n                disabled={!value.length}\n                onClick={onSubmitJoinRequest} >\n                  {value.length ? 'Request To Join Selected Rooms' : 'Select rooms you wish to join'}\n        </Button>\n      </div>\n    </div>\n    </>\n  )\n}\n\nexport default RoomsSearch;\n","import React, { useState, useEffect } from 'react';\nimport * as classes from './CurrentRoom.css'\nimport MessageInput from './message-input/MessageInput';\nimport MessageList from './message-list/MessageList';\nimport CreateRoom from './create-room/CreateRoom';\nimport RoomsSearch from './rooms-search/RoomsSearch';\n\nconst CurrentRoom = ({\n  currentRoom, \n  getMessages, \n  onSendMessage, \n  onSendCreatedNewRoom,\n  availableRooms,\n  onJoinRoomsRequest,\n  joinRequestSent,\n  setJoinRequestSent\n}) => {\n\n  console.log(currentRoom);\n\n  const renderSection = () => {\n    switch (currentRoom) {\n      case 'create room': return <CreateRoom sendCreatedNewRoom={onSendCreatedNewRoom} />\n      case 'join new room': return (\n        <RoomsSearch availableRooms={availableRooms} \n                     onJoinRoomsRequest={onJoinRoomsRequest} \n                     joinRequestSent={joinRequestSent}\n                     setJoinRequestSent={setJoinRequestSent} />\n      )\n      default: return <><MessageList currentRoom={currentRoom} messages={getMessages(currentRoom)} />\n      <MessageInput onSendMessage={onSendMessage(currentRoom)} /></>\n    }\n  }\n \n\n\n    return (\n      <div className='chat-room_container'>\n        {renderSection()}\n        {/* {currentRoom === 'create room' \n          ? <CreateRoom sendCreatedNewRoom={onSendCreatedNewRoom} />\n          : <><MessageList currentRoom={currentRoom} messages={getMessages(currentRoom)} />\n            <MessageInput onSendMessage={onSendMessage(currentRoom)} /></>\n        } */}\n      </div>\n    )\n}\n\nexport default CurrentRoom;\n\n","import React, { useEffect, useState } from 'react';\nimport RoomList from './room-list/RoomList';\nimport CurrentRoom from './current-room/CurrentRoom';\nimport { Grid, Segment } from 'semantic-ui-react';\n\nconst ActiveRooms = ({\n  roomNames,\n  rooms,\n  onMessageReceived,\n  onSendMessage,\n  onSendCreatedNewRoom,\n  availableRooms,\n  onJoinRoomsRequest,\n  joinRequestSent,\n  setJoinRequestSent\n}) => {\n\n  const [ currentRoom, setCurrentRoom ] = useState(null);\n  \n  useEffect(() => {\n    if (rooms && roomNames && !currentRoom) {\n      setCurrentRoom(roomNames[0])\n      return\n    };\n  }, [rooms, roomNames])\n\n  return (\n    currentRoom && currentRoom !== 'create' && \n    <Grid>\n      <Grid.Column width={4}>\n        {currentRoom && \n          <RoomList roomNames={roomNames} \n                    currentRoom={currentRoom} \n                    setCurrentRoom={setCurrentRoom}  \n                    />\n        }\n      </Grid.Column>\n      <Grid.Column stretched width={12}>\n        <Segment>\n          {rooms &&\n              ( <CurrentRoom \n                  currentRoom={currentRoom} \n                  getMessages={onMessageReceived} \n                  onSendMessage={onSendMessage} \n                  onSendCreatedNewRoom={onSendCreatedNewRoom}\n                  availableRooms={availableRooms}\n                  onJoinRoomsRequest={onJoinRoomsRequest}\n                  joinRequestSent={joinRequestSent}\n                  setJoinRequestSent={setJoinRequestSent} /> )\n          }\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  )\n}\n\nexport default ActiveRooms;","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nconst UserList = ({ PMuserNames, activeTab, PMsetActiveChat }) => {\n\n  console.log('in RoomList, PMuserNames: ', PMuserNames);\n\n  const handleItemClick = (e, { name }) => PMsetActiveChat(name);\n  console.log('active item: ', activeTab);\n\n  return (\n    <Menu fluid vertical tabular>\n        {\n          PMuserNames.map(room => {\n            return (\n              <Menu.Item\n                name={room}\n                key={room}\n                active={activeTab === room}\n                onClick={handleItemClick}\n              />\n            )\n          })\n        }\n        <Menu.Item\n          name='find user'\n          active={activeTab === 'find user'}\n          onClick={handleItemClick}\n        />\n    </Menu>\n  )\n}\n\nexport default UserList;","import React, { useState } from 'react'\nimport { Accordion, Icon, Segment, Input, Button } from 'semantic-ui-react'\nimport * as classes from './UsersSearch.css'\n\nconst UsersSearch = ({filteredUsers, onSendPrivateMessage}) => {\n\n  const [ activeIndex, setActiveIndex ] = useState(0);\n  const [ privateMessage, setPrivateMessage ] = useState('');\n\n  const onSelectUser = (e, titleProps) => {\n    const { index } = titleProps\n    const newIndex = activeIndex === index ? -1 : index\n    setActiveIndex(newIndex);\n  }\n\n  // console.log('filtered users in UsersSearch: ', filteredUsers);\n\n  return (\n    <>\n    <Segment className='users-search'> \n      {!filteredUsers.length && <p>No results to show!</p>}\n      {filteredUsers && filteredUsers.map((receipient, i) => ( \n        <Accordion >  \n          <Accordion.Title\n            active={activeIndex === i}\n            index={i}\n            onClick={onSelectUser}>\n            <Icon name='dropdown' />\n            {receipient}\n          </Accordion.Title>\n          <Accordion.Content active={activeIndex === i}>\n          <Input\n            className='findAndMessageInput'\n            onChange={(e) => setPrivateMessage(e.target.value)}\n            placeholder={`Message ${receipient}`} >\n            <input/>\n            <Button type='submit' onClick={(e) => onSendPrivateMessage(receipient)(privateMessage)}>Send Message</Button>\n          </Input>\n          </Accordion.Content>\n        </Accordion>\n        ))\n      }\n    </Segment>\n    </>\n  )\n}\n\nexport default UsersSearch;\n","import React, {useState} from 'react';\nimport UsersSearch from './UsersSearch';\nimport { Input } from 'semantic-ui-react';\n\n\nconst FindUser = ({onSendPrivateMessage, availableUsers}) => {\n\n  const [ filteredUsers, setFilteredUsers ] = useState(availableUsers);\n\n  const filterUsers = (e) => {\n    const query = e.target.value;\n    console.log('search query: ', query)\n    if (!query) setFilteredUsers(availableUsers)\n    const filtered = availableUsers.filter(user => {\n      return user.includes(query);\n    });\n    setFilteredUsers(filtered);\n    console.log(query);\n  }\n\n  return (\n    <>\n      <Input className='mainSearch' label='Find User' placeholder='Search...' onChange={filterUsers} />\n      <UsersSearch onSendPrivateMessage={onSendPrivateMessage} filteredUsers={filteredUsers} />\n    </>\n  )\n}\n\nexport default FindUser;","import React, { useState } from 'react';\nimport { Input } from 'semantic-ui-react';\nimport * as classes from './MessageInput.css';\n\nconst MessageInput = ({onSendPrivateMessage}) => {\n\n  const [ messageText, setMessage ] = useState('');\n  \n  const onSend = () => {\n    setMessage('');\n    console.log('sending message from MessageInput: ', messageText);\n    onSendPrivateMessage(messageText);\n  } \n\n  const updateCurrentMessage = (inputValue) => {\n    setMessage(() => inputValue);\n  }\n\n  return (\n    <Input \n      className='messageInput' \n      action={{content: 'Send', onClick: onSend}} \n      value={messageText}\n      placeholder='Type message...' \n      onChange={(e, {value}) => updateCurrentMessage(value)}\n      onKeyUp={(e) => {\n        if (e.keyCode === 13) {\n          onSend()\n        }\n      }}\n    />\n  )\n}\n\nexport default MessageInput;","import React, { useRef, useEffect } from 'react';\nimport { List } from 'semantic-ui-react';\nimport * as classes from './MessageList.css';\n\nconst MessageList = ({activeRoom, messages}) => {\n\n  // console.log(messages);\n\n  const messagesRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesRef.current.scrollIntoView({behavior: 'smooth'});\n  }\n\n  const renderMessages = () => {\n    const sortedMessages = messages.sort((a,b) => a.date - b.date);\n    return sortedMessages.map(({ messageid, senderName, receipientName, message, date }, i) => { \n      return (\n       <List.Item>\n         {/* <List.Icon name='user_icon' size='large' verticalAlign='middle' /> */}\n         <List.Content key={i}>\n           <List.Header>Receiver {receipientName}, Sender: {senderName}</List.Header>\n           <List.Description>{message}</List.Description>\n         </List.Content>\n       </List.Item>\n     )\n   })\n  }\n\n  useEffect(scrollToBottom, [messages]);\n\n  return (\n    <div>\n\n      <List divided relaxed>\n          \n          <List.Item>\n            {/* <List.Icon name='user_icon' size='large' verticalAlign='middle' /> */}\n            <List.Content>\n              <List.Header>Dummy user name</List.Header>\n              <List.Description>Dummy message</List.Description>\n            </List.Content>\n          </List.Item>   \n\n          { \n            renderMessages()\n          }\n          <div ref={messagesRef} />\n        </List>\n\n    </div>\n  )\n}\n\nexport default MessageList;","import React from 'react';\nimport * as classes from './CurrentChat.css'\nimport MessageInput from './message-input/MessageInput';\nimport MessageList from './message-list/MessageList';\n\n\n\nconst CurrentChat = ({activeRoom, messages, onSendPrivateMessage}) => {\n\n  console.log(activeRoom);\n  console.log('[CurrentChat] messages: ', messages)\n\n    return (\n      <div className='chat-room_container'>\n        <MessageList activeRoom={activeRoom} messages={messages} />\n        <MessageInput onSendPrivateMessage={onSendPrivateMessage} />\n      </div>\n    )\n}\n\n\nexport default CurrentChat;\n\n","import React, { useState } from 'react';\nimport UserList from './user-list/UserList';\nimport FindUser from './users-search/FindUser';\nimport CurrentChat from './current-chat/CurrentChat';\nimport { Grid, Segment } from 'semantic-ui-react';\n\nconst PrivateChats = ({\n  PMuserNames,\n  PMessages,\n  onPrivateMessageReceived,\n  onSendPrivateMessage,\n  availableUsers\n}) => {\n\n  const [ PMactiveChat, PMsetActiveChat ] = useState(PMuserNames[0]);\n  console.log('[PrivateChat] PMchats[username].messages: ', PMessages[PMuserNames[0]].messages)\n  console.log('[PrivateChat] PMuserNames: ', PMuserNames)\n  console.log('[PrivateChat] PMactiveChat: ', PMactiveChat)\n\n  return (\n    <Grid>\n      <Grid.Column width={4}>\n        {PMactiveChat && \n          <UserList PMuserNames={PMuserNames} activeTab={PMactiveChat} PMsetActiveChat={PMsetActiveChat} />\n        }\n      </Grid.Column>\n      <Grid.Column stretched width={12}>\n        <Segment>\n          {PMactiveChat === 'find user' && <FindUser onSendPrivateMessage={onSendPrivateMessage} availableUsers={availableUsers} />}\n          {PMessages && PMactiveChat !== 'find user' &&\n              ( <CurrentChat \n                PMactiveChat={PMactiveChat} \n                messages={onPrivateMessageReceived(PMactiveChat)} \n                onSendPrivateMessage={onSendPrivateMessage(PMactiveChat)} />)\n          }\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  )\n}\n\nexport default PrivateChats;","import React, { useState, useEffect } from 'react';\nimport Header from './header/Header';\nimport * as classes from './MainApp.css';\nimport Dashboard from './dashboard/Dashboard';\nimport Notifications from './notifications/Notifications';\nimport ActiveRooms from './active-rooms/ActiveRooms';\nimport PrivateChats from './private-chats/PrivateChats';\n\nconst MainApp = ({\n  onSendMessage,\n  onMessageReceived,\n  onJoinRoomsRequest,\n  joinRequestSent,\n  setJoinRequestSent,\n  joinRequestsApproved,\n  rooms,\n  roomNames,\n  joinRequestsReceived,\n  joinRequestsPending,\n  onLogout,\n  availableRooms,\n  availableUsers,\n  confirmJoinRequest,\n  onPrivateMessageReceived,\n  PMuserNames,\n  PMessages,\n  onSendPrivateMessage,\n  onSendCreatedNewRoom\n}) => {\n\n \n  const [ activeTab, setActiveTab ] = useState(rooms ? 'messages' : 'dashboard');\n  console.log('[MainApp] PMessages: ');\n  console.dir(PMessages);\n\n  const DashboardProps = {\n    availableRooms,\n    availableUsers,\n    onSendPrivateMessage,\n    onJoinRoomsRequest,\n    joinRequestsPending,\n    joinRequestsApproved,\n    joinRequestSent,\n    setJoinRequestSent\n  }\n\n  const JoinNewRoomProps = {\n    availableRooms,\n    onJoinRoomsRequest,\n    joinRequestSent,\n    setJoinRequestSent\n  }\n\n  const ActiveRoomsProps = {\n    roomNames,\n    rooms,\n    onMessageReceived,\n    onSendMessage,\n    onSendCreatedNewRoom\n  }\n\n  const PrivateChatsProps = {\n    PMuserNames,\n    PMessages,\n    onPrivateMessageReceived,\n    onSendPrivateMessage,\n    availableUsers\n  }\n\n  const NotificationsProps = {\n    joinRequestsReceived,\n    confirmJoinRequest\n  }\n\n  const renderSection = (activeTab) => {\n    switch (activeTab) {\n      case 'logout': return onLogout();\n      case 'your-rooms': return  (rooms) ? <ActiveRooms {...ActiveRoomsProps} {...JoinNewRoomProps} /> : null;\n      case 'private-chats': return (PMessages) ? <PrivateChats {...PrivateChatsProps} /> : null;\n      case 'dashboard': return (availableRooms && availableUsers) ? <Dashboard {...DashboardProps} /> : null;\n      case 'notifications': return <Notifications {...NotificationsProps} />;\n      default: return (availableRooms && availableUsers) ? <Dashboard {...DashboardProps} /> : null;\n    }\n  }\n\n  return (\n    <div className='container'>\n      <Header onLogout={onLogout} activeTab={activeTab} setActiveTab={setActiveTab} />\n      { renderSection(activeTab) }\n    </div>\n  )\n}\n\nexport default MainApp;","import React from 'react'\nimport { Message } from 'semantic-ui-react'\n\nconst WarningMessage = ({message, ...otherProps}) => (\n  <Message {...otherProps}>\n    <Message.Header>{message.title}</Message.Header>\n    <p>{message.text}</p>\n  </Message>\n)\n\nexport default WarningMessage;","import React, { useState, useEffect } from 'react';\nimport { Form, Grid } from 'semantic-ui-react';\nimport WarningMessage from './WarningMessage';\nimport * as classes from './Login.css';\n\n\n\nconst Login = ({authenticateUser, signupNewUser, userUnauthorised}) => {\n\n  // form state\n  const [ username, setUsername ] = useState('');\n  const [ password, setPassword ] = useState('');\n  const [ passwordConfirm, setPasswordConfirm ] = useState('');\n\n  const [ isSignupMode, setIsSignupMode ] = useState(false);\n  const [ signupSuccess, setSignupSuccess ] = useState(false);\n\n  const [ nameError, setNameError ] = useState(false);\n  const [ passwordError, setPasswordError ] = useState(false);\n  const [ passwordConfirmError, setPasswordConfirmError ] = useState(false);\n\n  const [ signupError, setSignupError ] = useState(false);\n  const [ signinError, setSigninError ] = useState(false);\n\n\n  useEffect(() => {\n    setSigninError(userUnauthorised);\n  }, [userUnauthorised]);\n  \n \n  // input handlers\n  const handleNameChange = (e) => {\n    setSignupError(false);\n    setSigninError(false);\n    const currentName = e.target.value;\n    setUsername(currentName);\n    if (!currentName) setNameError(true)\n    else setNameError(false)\n  };\n\n  const handlePasswordChange = (e) => {\n    const currentPassword = e.target.value;\n    setPassword(currentPassword);\n    if (!currentPassword || currentPassword.length < 5 || currentPassword.length > 20) setPasswordError(true);\n    else setPasswordError(false);\n  };\n  \n  const handlePasswordConfirmChange = (e) => {\n    const currentPasswordConfirm = e.target.value;\n    setPasswordConfirm(currentPasswordConfirm)\n    if (!currentPasswordConfirm || password !== currentPasswordConfirm) setPasswordConfirmError(true);\n    else setPasswordConfirmError(false);\n  };\n\n\n  \n  // submit handlers\n\n  const sendSignUp = () => {\n    if (username && (password === passwordConfirm) && isSignupMode) {\n      console.log(`[Login@sendSignup]`);\n      signupNewUser(username,password)\n      .then(response => {\n        console.log('response satatus: ', response.status);\n        console.log('POST request result ', response);\n        console.log('response from server: ', response.data);\n        if (response.status===201) {\n          console.log('received response 201')\n          setSignupSuccess(true);\n          setIsSignupMode(false);  \n        }\n        clearInputs()\n      })\n      .catch(error => {\n        setSignupError(username);\n        clearInputs();\n        console.log('POST request error: ', error);\n      })\n    }\n  }\n\n  const clearInputs = () => {\n    setUsername('');\n    setPassword('');\n    setPasswordConfirm('');\n  }\n  \n  const verifyAndRedirect = () => {\n    clearInputs();\n    authenticateUser(username, password);\n  }\n  \n  const toggleSignup = () => {\n    clearInputs();\n    setNameError(false);\n    setPasswordError(false);\n    setPasswordConfirmError(false);\n    setSignupError(false);\n    setSignupError(false);\n    setIsSignupMode(prevstate => {\n      if (!prevstate.isSignupMode) setSignupSuccess(false); \n      return !prevstate\n    })\n  };\n  \n  // renderers\n\n  const renderSuccessMessage = () => {\n    const attributes = {\n      color: 'green',\n      message: {\n        title: 'You have successfully signed up!',\n        text: 'Please log in to continue.'\n      }\n    }\n    return <WarningMessage {...attributes} />\n  }\n\n  const renderErrorMessage = () => {\n    const attributes = {\n      negative: true\n    };\n    if (nameError) {\n      attributes.message = { \n        title: 'Username required!', \n        text: 'Please provide a valid name.'\n      }\n    }\n    else if (passwordError) {\n      attributes.message = {\n        title: 'Password required!', \n        text: 'Please provide a valid password.'\n      }\n    }\n    else if (passwordConfirmError) {\n      attributes.message = {\n        title: 'Password confirmation required!', \n        text: 'Please confirm your password.'\n      } \n    }\n    else if (signupError) {\n      attributes.message = {\n        title: `Username ${signupError} already exists!`,\n        text: 'Please use different name'\n      }\n    }\n    else if (signinError) {\n      attributes.message = {\n        title: 'Wrong username or password!',\n        text: 'Please sign in with valid name and password'\n      }\n    }\n    return nameError || passwordError || passwordConfirmError || signinError || signupError\n      ? <WarningMessage {...attributes} />\n      : null;\n  }\n\n  const renderSignupForm = () => {\n    return (\n      <Form.Group widths='equal'>\n        <Form.Field id='username'>\n          <label style={{'textAlign': 'left'}}>User Name</label>\n          <input placeholder='User Name' value={username} onChange={handleNameChange} error={{\n        content: 'Please enter User Name',\n        pointing: 'below',\n      }}/>\n        </Form.Field>\n        <Form.Field id='password'>\n          <label style={{'textAlign': 'left'}}>Password</label>\n          <input placeholder='Password' value={password} onChange={handlePasswordChange} error={{\n        content: 'Please enter a valid password',\n        pointing: 'below',\n      }}/>\n        </Form.Field>\n        <Form.Field id='passwordConfirm'>\n          <label style={{'textAlign': 'left'}}>Confirm Password</label>\n          <input placeholder='Password' value={passwordConfirm} onChange={handlePasswordConfirmChange} error={{\n        content: 'Paswords need to match!',\n        pointing: 'below',\n      }}/>\n        </Form.Field>\n      </Form.Group>\n    )\n  }\n\n  const renderLoginForm = () => {\n    return (\n      <Form.Group widths='equal'>\n        <Form.Field>\n          <label style={{'textAlign': 'left'}}>User Name</label>\n          <input placeholder='User Name' value={username} onChange={handleNameChange} />\n        </Form.Field>\n        <Form.Field>\n          <label style={{'textAlign': 'left'}}>Password</label>\n          <input placeholder='Password' value={password} onChange={handlePasswordChange} />\n        </Form.Field>\n      </Form.Group>\n    )\n  }\n\n\n  return (\n    <div>\n      <Grid centered >\n        <Form >\n          { renderErrorMessage() }\n          { signupSuccess && renderSuccessMessage()}\n          { isSignupMode ? renderSignupForm() : renderLoginForm() }\n          <div className='buttons'>\n            <Form.Button  onClick={toggleSignup}>\n              {isSignupMode ? 'Already a user, log me in!' : 'Not yet a user, sign me up!'}\n            </Form.Button>\n            <Form.Button \n              type='submit' \n              className={classes.login_button}\n              onClick={isSignupMode ? sendSignUp : verifyAndRedirect } \n              disabled={\n                isSignupMode \n                ? !username || !password || password.length < 5 || password.length > 20 || password !== passwordConfirm\n                : !username || !password || password.length < 5 || password.length > 20} >\n              {isSignupMode ? 'Sign Up' : 'Login'}\n            </Form.Button>\n          </div>\n        </Form>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Login;\n\n","import io from 'socket.io-client';\nimport { useState, useEffect, useRef } from 'react';\nimport { v4 } from 'uuid';\nimport axios from 'axios';\n\nconst useSocket = () => {\n  const socketRef = useRef();\n\n  const [ username, setUsername ] = useState(null);\n  const [ password, setPassword ] = useState(null);\n\n  const [ userAuthenticated, setUserAuthenticated ] = useState(false);\n  const [ userUnauthorised, setUserUnauthorised ] = useState(false);\n\n  const [ roomEventsWereSet, setEventsWereSet ] = useState(false);\n  const [ rooms, setRooms ] = useState(null);\n  const [ roomNames, setRoomNames ] = useState([]);\n\n  const [ availableRooms, setAvailableRooms ] = useState(null);\n  const [ availableUsers, setAvailableUsers ] = useState(null);\n\n  const [ joinRequestSent, setJoinRequestSent ] = useState(null);\n  const [ joinRequestsPending, setJoinRequestsPending ] = useState([]);\n  const [ joinRequestsApproved, setJoinRequestsApproved] = useState([]);\n\n  const [ PMUserNames, setPMUserNames ] = useState([]);\n  const [ PMessages, setPMessages ] = useState(null);\n  const [ PMeventsWereSet, setPMEventsWereSet ] = useState(false);\n\n  \n  // NOTIFICATIONS:\n  const [ joinRequestsToApprove, setjoinRequestsToApprove ] = useState(null);\n \n\n  // authenticate user\n  const authenticateUser = (name, pass) => {\n    setUsername(name);\n    setPassword(pass);\n  } \n\n  useEffect(() => {\n    if (username && password) {\n      socketRef.current = io(\"http://localhost:3001\");\n\n      socketRef.current.on('connect', () => {\n        console.log('Socket connected: ', socketRef.current.socket);\n        // console.log('username: ', username, 'password: ', password);\n        socketRef.current.emit('authentication', {username: username, password: password});\n      });\n      socketRef.current.on(\"unauthorized\", () => {\n        setUserUnauthorised(true);\n        setUserAuthenticated(false);\n        setUsername(null);\n        setPassword(null);\n        // redirect to login\n      })\n      socketRef.current.on('authenticated', function() {\n        setUserAuthenticated(true);\n        setPMEventsListeners();\n        setPMEventsWereSet(true);\n        socketRef.current.on(\"joined rooms\", (roomNames) => {\n          setRoomNames(roomNames);\n          // setConnectedSocket(socketRef.current.id);\n          console.log('roomsNames in useEffect: ', roomNames);\n        });\n        socketRef.current.on(\"past messages\", (pastMessages) => {\n          // console.log('recieved past messages: ', pastMessages);\n          setRooms(pastMessages);\n        })\n        socketRef.current.on(\"past private messages\", (privateMessages) => {\n          setPMessages(privateMessages);\n        })\n        socketRef.current.on(\"available rooms\", (availableRooms) => {\n          setUserAuthenticated(true);\n          setAvailableRooms(availableRooms);\n        })\n        socketRef.current.on(\"join room requests to approve\", (join_requests) => {\n          setjoinRequestsToApprove(join_requests);\n        })\n        socketRef.current.on(\"join requests pending approval\", (reqs_pending) => {\n          setJoinRequestsPending(reqs_pending);\n        })\n        socketRef.current.on(\"join requests approved\", (reqs_approved) => {\n          setJoinRequestsApproved(reqs_approved);\n        })\n        socketRef.current.on(\"available users\", (availableUsers) => {\n          setAvailableUsers(availableUsers);\n        })\n        socketRef.current.on(\"new room created\", newRoom => {\n          updateRoomState(newRoom);\n        })\n      });\n      return () => {\n        socketRef.current.disconnect();\n      };\n    }\n  }, [username, password]);\n\n\n  // set chat room events\n  useEffect(() => {\n    if (rooms && !roomEventsWereSet) {\n      setRoomEventsListeners();\n      setEventsWereSet(true);\n      return;\n    };\n  }, [rooms, roomNames, roomEventsWereSet]);\n\n  useEffect(() => {\n    if (PMessages) {\n      const PMnames = Object.keys(PMessages)\n      setPMUserNames([...PMnames])\n    }\n  }, [PMessages])\n\n  const updateRoomState = (newRoom) => {\n    setRooms(prevstate => {\n      return {\n        ...prevstate,\n        newRoom\n      }\n    });\n    setRoomNames(prevstate => {\n      return [\n        ...prevstate,\n        newRoom.roomName\n      ]\n    })\n  }\n\n  const setRoomEventsListeners = () => {\n    const isPrivate = false;\n    console.log('setRoomEvents outer fn, rooms: ');\n    console.dir(rooms);\n    \n    roomNames.forEach((roomName) => {\n        console.log(`setting event for room: ${roomName}`);\n        socketRef.current.on(`message for ${roomName}`, ({ message }) => {\n          console.log(`event received: 'message for ' ${roomName}, message: ${message}`);\n          console.log(`chats: `);\n          console.dir(rooms);\n          addMessageToChat(roomName, message, isPrivate);\n        });\n    })\n  }\n\n  const setPMEventsListeners = () => {\n    const isPrivate = true;\n    console.log(`[setPMEventsListeners] setting private message events`);\n    socketRef.current.on(`private message`, (privateMessage) => {\n      addMessageToChat(privateMessage.receipientName, privateMessage, isPrivate);\n      console.log(`received private message for: ' ${privateMessage.receipientName}, message: ${privateMessage.messagetext}`);\n      // console.log(`private chats: `);\n      // console.dir(PMessages);\n    });\n  }\n\n  const addMessageToChat = (chatName, message, privateMessage) => {\n    console.log(`[addMessageToChat] chatName: ${chatName}, message: `);\n    console.dir(message);\n    console.log(`addMessageToChat: rooms: ${rooms}`);\n  \n    if (privateMessage) {\n      setPMessages((prevstate) => {\n        return updateChatState(prevstate, chatName, message)\n      })\n    }\n    else {\n      setRooms((prevstate) => {\n        return updateChatState(prevstate, chatName, message);\n      });\n    } \n  }\n\n  const updateChatState = (prevstate, chatName, message, privateMessage) => {\n    if (!prevstate || !prevstate[chatName]) {\n      const chatMessages = [message];\n      return {\n        ...prevstate,\n        [chatName]: {\n          messages: chatMessages\n        }\n      }\n    }\n    const oldMessages = prevstate[chatName].messages;\n    const updateMessages = [...oldMessages];\n    console.log('[addMessageToChat] oldMessages', oldMessages)\n    updateMessages.push(message);\n    console.log('[addMessageToChat] updateMessages', updateMessages)\n\n    const updatedRoom = {\n      ...prevstate[chatName],\n      messages: updateMessages\n    }\n    console.log('updatedRoom: ', updatedRoom);\n    const updatedRooms = {\n      ...prevstate,\n      [chatName]: updatedRoom\n    }\n    console.log('updatedRooms: ', updatedRooms);\n    return {\n      ...prevstate,\n      [chatName]: updatedRoom\n    }\n  }\n\n  const sendPM = (receipientName) => {\n    console.log(`[_useSocket] sendPM receipientName: ${receipientName}`)\n    return (messageText) => {\n      const longDate = new Date();\n      console.log('[_useSocket] inner fn sendPM, roomName: ', receipientName);\n      const privateMessage = {\n        date: Date.parse(longDate) /1000,\n        message: messageText,\n        receipientName,\n        senderName: username\n      }\n      socketRef.current.emit(`private message`, privateMessage);\n    };\n  }\n  \n  const sendMessage = (roomName) => {\n    const longDate = new Date();\n    return (messageText) => {\n      console.log('[sendMessage@_useSocket], roomName: ', roomName);\n      const message = {\n        date: Date.parse(longDate) /1000,\n        messagetext: messageText,\n        roomname: roomName,\n        username: username\n      }\n      socketRef.current.emit(`message for ${roomName}`, {message: message});\n    };\n  }\n\n  const getMessagesForRoom = (roomName) => {\n    console.log('[getMessagesForRoom], roomName: ', roomName);\n      if (rooms[roomName]) {\n        return rooms[roomName].messages;\n      }\n  }\n\n  const getPrivateMessagesFromUser = (userName) => {\n    if (PMessages) {\n      return PMessages[userName].messages;\n    }\n  }\n\n  const sendCreateNewRoom = (newRoom) => {\n    newRoom.creatorName = username;\n    socketRef.current.emit('create new room', newRoom);\n  }\n\n  const signupNewUser = (newName, newPassword) => {\n    // console.log('[_useSocket@signupNewUser]')\n      const payload = {\n        username: newName,\n        password: newPassword\n      };\n      return axios({\n        method: 'post',\n        url: 'http://localhost:3001/signup',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        data:  payload,\n      })\n  } \n\n  const sendJoinRequest = (rooms) => {\n    const payload = {\n      rooms: rooms,\n      username: username\n    };\n    return axios({\n      method: 'post',\n      url: 'http://localhost:3001/joinRooms',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data:  payload,\n    })\n    .then(res => {\n      if (res.status === 200) {\n        setJoinRequestSent({requestedRooms: rooms});\n        setAvailableRooms(prevstate => {\n          const updatedAvailableRooms = prevstate.filter((room) => {\n            return !rooms.includes(room);\n          })\n          console.log('[_useSocket], updatedAvailableRooms', updatedAvailableRooms);\n          return [...updatedAvailableRooms]\n        })\n      }\n    })\n  }\n\n  const confirmJoinRequest = (request) => {\n    socketRef.current.emit('confirm join request', request);\n    setjoinRequestsToApprove(prevstate => {\n      const updated = prevstate.filter(req => req.id !== request.id);\n      return [...updated];\n    }) \n  }\n\n\n  const logoutUser = () => {\n    setUserAuthenticated(false);\n    setUsername(null);\n    setPassword(null);\n    setRooms(null);\n    setRoomNames(null);\n    setEventsWereSet(null);\n    // socketRef.current = null;\n    return socketRef.current.disconnect();\n  }\n\n  return { \n      authenticateUser,\n      signupNewUser,\n      logoutUser,\n      userAuthenticated,\n      userUnauthorised,\n      roomNames,\n      rooms,\n      availableRooms,\n      availableUsers,\n      joinRequestSent,\n      joinRequestsToApprove,\n      joinRequestsPending,\n      joinRequestsApproved,\n      confirmJoinRequest,\n      setJoinRequestSent,\n      sendJoinRequest,\n      getMessagesForRoom,\n      sendMessage,\n      getPrivateMessagesFromUser,\n      sendCreateNewRoom,\n      PMUserNames,\n      PMessages,\n      sendPM\n  };\n\n}\n\nexport default useSocket;","import React from 'react';\nimport MainApp from './main-app/MainApp';\nimport Login from './login/Login';\nimport useSocket from '../_useSocket';\n\nconst Layout = (props) => {\n  \n const { \n  signupNewUser,\n  authenticateUser,\n  logoutUser,\n  userAuthenticated,\n  userUnauthorised,\n  roomNames,\n  rooms,\n  availableRooms,\n  availableUsers,\n  joinRequestSent,\n  joinRoomsSuccess,\n  joinRequestsToApprove,\n  joinRequestsPending,\n  joinRequestsApproved,\n  sendCreateNewRoom,\n  confirmJoinRequest,\n  setJoinRequestSent,\n  sendJoinRequest,\n  getMessagesForRoom,\n  sendMessage,\n  getPrivateMessagesFromUser,\n  PMUserNames,\n  PMessages,\n  sendPM\n} = useSocket();\n\n\n  // MAPPED FROM USESOCKET: \n  const onAuthenticate = (username, password) => {\n    authenticateUser(username, password);\n  }\n  const onLogout = () => {\n    logoutUser();\n  }\n  const onSendMessage = (activeRoom) => {\n    return sendMessage(activeRoom);\n  }\n  const onMessageReceived = (roomName) => {\n    return getMessagesForRoom(roomName);\n  }\n  const onPrivateMessageReceived = (userName) => {\n    return getPrivateMessagesFromUser(userName);\n  }\n\n  const onSendCreatedNewRoom = (roomName) => {\n    return sendCreateNewRoom(roomName);\n  }\n\n  const getRooms = () => {\n    return rooms;\n  }\n  const getRoomNames = () => {\n    return roomNames;\n  }\n  const getAvailableRooms = () => {\n    return availableRooms\n  }\n  const getAvailableUsers = () => {\n    return availableUsers;\n  }\n\n  const getJoinRoomsSuccess = () => {\n    return joinRoomsSuccess;\n  }\n\n  const getJoinRequestSent = () => {\n    return joinRequestSent;\n  }\n\n  const getJoinRequestsReceived = () => {\n    return joinRequestsToApprove;\n  }\n\n  const getJoinRequestsPending = () => {\n    return joinRequestsPending;\n  }\n\n  const getJoinRequestsApproved = () => {\n    return joinRequestsApproved;\n  }\n\n  const onJoinRoomsRequest = (rooms) => {\n    return sendJoinRequest(rooms);\n  }\n\n  const setJoinReqSent = () => {\n    return setJoinRequestSent();\n  }\n\n  const getPMuserNames = () => {\n    return PMUserNames;\n  }\n\n  const getPMessages = () => {\n    return PMessages;\n  }\n\n  const onSendPrivateMessage = (username, message) => {\n    return sendPM(username, message);\n  }\n\n  const socketMethodsToProps = {\n    availableRooms: getAvailableRooms(),\n    availableUsers: getAvailableUsers(),\n    joinRequestSent: getJoinRequestSent(),\n    rooms: getRooms(),\n    roomNames: getRoomNames(),\n    joinRequestsReceived: getJoinRequestsReceived(),\n    joinRoomsSuccess: getJoinRoomsSuccess(),\n    joinRequestsApproved: getJoinRequestsApproved(),\n    joinRequestsPending: getJoinRequestsPending(),\n    setJoinRequestSent: setJoinReqSent,\n    onSendMessage,\n    onMessageReceived,\n    onSendCreatedNewRoom,\n    PMuserNames: getPMuserNames(),\n    PMessages: getPMessages(),\n    onPrivateMessageReceived,\n    onSendPrivateMessage,\n    onJoinRoomsRequest,\n    confirmJoinRequest,\n    onLogout\n  }\n\n    \n  const renderMainApp = () => {\n    return (<MainApp  {...socketMethodsToProps} />);\n  }\n\n  return (\n    <div>\n      {!userAuthenticated \n        ? <Login authenticateUser={onAuthenticate} \n                 signupNewUser={signupNewUser} \n                 userUnauthorised={userUnauthorised} /> : null}\n      {userAuthenticated && renderMainApp()}\n    </div>\n    \n  )\n}\n\nexport default Layout;\n","import React from 'react';\nimport './App.css';\nimport Layout from './components/layout/Layout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Router>\n    <App />\n  </Router>\n  // </React.StrictMode>,\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}